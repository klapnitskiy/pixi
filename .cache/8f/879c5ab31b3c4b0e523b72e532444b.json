{"id":"node_modules/pixijs/core/autoDetectRenderer.mjs","dependencies":[{"name":"D:\\Projects\\canvas_test\\node_modules\\pixijs\\core\\autoDetectRenderer.mjs.map","includedInParent":true,"mtime":1704314802254},{"name":"D:\\Projects\\canvas_test\\package.json","includedInParent":true,"mtime":1704314817469},{"name":"D:\\Projects\\canvas_test\\node_modules\\pixijs\\package.json","includedInParent":true,"mtime":1704314802202},{"name":"pixijs/extensions","loc":{"line":1,"column":42,"index":42},"parent":"D:\\Projects\\canvas_test\\node_modules\\pixijs\\core\\autoDetectRenderer.mjs","resolved":"D:\\Projects\\canvas_test\\node_modules\\pixijs\\extensions\\index.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.autoDetectRenderer = autoDetectRenderer;\nvar _extensions = require(\"pixijs/extensions\");\nconst renderers = [];\n_extensions.extensions.handleByList(_extensions.ExtensionType.Renderer, renderers);\nfunction autoDetectRenderer(options) {\n  for (const RendererType of renderers) {\n    if (RendererType.test(options)) {\n      return new RendererType(options);\n    }\n  }\n  throw new Error(\"Unable to auto-detect a suitable renderer.\");\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":25,"column":6},"generated":{"line":8,"column":6}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":25,"column":6},"generated":{"line":8,"column":15}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":25,"column":51},"generated":{"line":8,"column":18}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":25,"column":52},"generated":{"line":8,"column":20}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":9,"column":0}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":9,"column":22}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":9,"column":23}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":9,"column":35}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":24},"generated":{"line":9,"column":36}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":38},"generated":{"line":9,"column":61}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":38},"generated":{"line":9,"column":62}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":38},"generated":{"line":9,"column":70}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":48},"generated":{"line":9,"column":72}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":57},"generated":{"line":9,"column":81}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":27,"column":57},"generated":{"line":9,"column":82}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":77,"column":7},"generated":{"line":10,"column":0}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":77,"column":7},"generated":{"line":10,"column":9}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":77,"column":7},"generated":{"line":10,"column":27}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":77,"column":67},"generated":{"line":10,"column":28}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":10,"column":35}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":10,"column":37}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":79,"column":4},"generated":{"line":11,"column":2}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":79,"column":4},"generated":{"line":11,"column":7}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":79,"column":15},"generated":{"line":11,"column":13}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":79,"column":15},"generated":{"line":11,"column":25}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":79,"column":31},"generated":{"line":11,"column":29}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":11,"column":38}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":11,"column":40}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":81,"column":12},"generated":{"line":12,"column":4}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":81,"column":12},"generated":{"line":12,"column":8}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":81,"column":12},"generated":{"line":12,"column":20}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":81,"column":25},"generated":{"line":12,"column":21}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":81,"column":30},"generated":{"line":12,"column":25}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":81,"column":30},"generated":{"line":12,"column":26}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":81,"column":37},"generated":{"line":12,"column":33}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":82,"column":8},"generated":{"line":12,"column":34}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":82,"column":8},"generated":{"line":12,"column":36}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":19},"generated":{"line":13,"column":6}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":19},"generated":{"line":13,"column":13}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":23},"generated":{"line":13,"column":17}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":23},"generated":{"line":13,"column":29}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":36},"generated":{"line":13,"column":30}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":43},"generated":{"line":13,"column":37}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":43},"generated":{"line":13,"column":38}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":83,"column":43},"generated":{"line":14,"column":4}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":84,"column":8},"generated":{"line":15,"column":2}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":87,"column":10},"generated":{"line":16,"column":2}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":87,"column":10},"generated":{"line":16,"column":8}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":87,"column":14},"generated":{"line":16,"column":12}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":87,"column":14},"generated":{"line":16,"column":17}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":87,"column":20},"generated":{"line":16,"column":18}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":87,"column":64},"generated":{"line":16,"column":62}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":87,"column":64},"generated":{"line":16,"column":63}},{"source":"../src/autoDetectRenderer.ts","name":null,"original":{"line":88,"column":0},"generated":{"line":17,"column":0}}],"sources":{"../src/autoDetectRenderer.ts":"import { extensions, ExtensionType } from 'pixijs/extensions';\n\nimport type { ICanvas } from 'pixijs/settings';\nimport type { IRenderer, IRendererOptions } from './IRenderer';\n\n/**\n * Renderer options supplied to `autoDetectRenderer`.\n * @memberof PIXI\n */\nexport interface IRendererOptionsAuto extends IRendererOptions\n{\n    forceCanvas?: boolean;\n}\n\nexport interface IRendererConstructor<VIEW extends ICanvas = ICanvas>\n{\n    test(options?: IRendererOptionsAuto): boolean;\n    new (options?: IRendererOptionsAuto): IRenderer<VIEW>;\n}\n\n/**\n * Collection of installed Renderers.\n * @ignore\n */\nconst renderers: IRendererConstructor<ICanvas>[] = [];\n\nextensions.handleByList(ExtensionType.Renderer, renderers);\n\n/**\n * This helper function will automatically detect which renderer you should be using.\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n * the browser then this function will return a canvas renderer.\n * @memberof PIXI\n * @function autoDetectRenderer\n * @param {PIXI.IRendererOptionsAuto} [options] - The optional renderer parameters.\n * @param {boolean} [options.antialias=false] -\n *  **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n * @param {boolean} [options.autoDensity=false] -\n *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n * @param {number|string} [options.background] - Alias for `options.backgroundColor`.\n * @param {number} [options.backgroundAlpha=1] -\n *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @param {number|string} [options.backgroundColor=0x000000] -\n *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`),\n *  hex strings (e.g. `'#f00'` or `'#ff0000'`) or color names (e.g. `'red'`).\n * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n * @param {boolean} [options.forceCanvas=false] -\n *  Force using {@link PIXI.CanvasRenderer}, even if WebGL is available. This option only is available when\n *  using **pixijs/browser/legacy** or **pixijs/renderer/canvas** packages, otherwise it will throw an error.\n * @param {number} [options.height=600] - The height of the renderer's view.\n * @param {boolean} [options.hello=false] - Whether to log the version and type information of renderer to console.\n * @param {string} [options.powerPreference] -\n *  **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n *  can be `'default'`, `'high-performance'` or `'low-power'`.\n *  Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n *  while setting to `'low-power'` will prioritize power saving over rendering performance.\n * @param {boolean} [options.premultipliedAlpha=true] -\n *  **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n * @param {boolean} [options.preserveDrawingBuffer=false] -\n *  **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n *  its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n *  The resolution / device pixel ratio of the renderer.\n * @param {boolean|'notMultiplied'} [options.useContextAlpha=true] -\n *  **Deprecated since 7.0.0, use `premultipliedAlpha` and `backgroundAlpha` instead.** \\\n *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n *  If you want to set transparency, please use `backgroundAlpha`. \\\n *  **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n *  set to `true` and `premultipliedAlpha` will be to `false`.\n * @param {PIXI.ICanvas} [options.view=null] -\n *  The canvas to use as the view. If omitted, a new canvas will be created.\n * @param {number} [options.width=800] - The width of the renderer's view.\n * @returns Returns {@link PIXI.Renderer} if WebGL is available, otherwise {@link PIXI.CanvasRenderer}.\n */\nexport function autoDetectRenderer<VIEW extends ICanvas = ICanvas>(options?: IRendererOptionsAuto): IRenderer<VIEW>\n{\n    for (const RendererType of renderers)\n    {\n        if (RendererType.test(options))\n        {\n            return new RendererType(options) as IRenderer<VIEW>;\n        }\n    }\n\n    throw new Error('Unable to auto-detect a suitable renderer.');\n}\n"},"lineCount":null}},"error":null,"hash":"cfa9c61da7a4ac68f456d4472e15e81c","cacheData":{"env":{}}}